{
  "db_name": "PostgreSQL",
  "query": "\n            SELECT\n                json_build_object(\n                    'name', tp.name,\n                    'description', latest_tpvs.description,\n                    'documentation_link', latest_tpvs.documentation_link,\n                    'repository_link', latest_tpvs.repository_link,\n                    'version', latest_tpvs.version,\n                    'postgres_versions', (\n                        SELECT json_agg(pg.major)\n                        FROM v1.trunk_project_postgres_support tpps\n                        JOIN v1.postgres_version pg ON tpps.postgres_version_id = pg.id\n                        WHERE tpps.trunk_project_version_id = latest_tpvs.id\n                    ),\n                    'downloads', (\n                        SELECT json_agg(json_build_object(\n                            'link', tpd.download_url,\n                            'pg_version', pg.major,\n                            'platform', plt.platform_name,\n                            'sha256', tpd.sha256\n                        ))\n                        FROM v1.trunk_project_downloads tpd\n                        JOIN v1.postgres_version pg ON tpd.postgres_version_id = pg.id\n                        JOIN v1.platform plt ON tpd.platform_id = plt.id\n                        WHERE tpd.trunk_project_version_id = latest_tpvs.id\n                    ),\n                    'extensions', (\n                        SELECT json_agg(json_build_object(\n                            'extension_name', ev.extension_name,\n                            'version', ev.version,\n                            'trunk_project_name', tp.name,\n                            'dependencies_extension_names', (\n                                SELECT json_agg(ed.depends_on_extension_name)\n                                FROM v1.extension_dependency ed\n                                WHERE ed.extension_version_id = ev.id\n                            ),\n                            'loadable_libraries', (\n                                SELECT json_agg(json_build_object(\n                                    'library_name', ell.library_name,\n                                    'requires_restart', ell.requires_restart,\n                                    'priority', ell.priority\n                                ))\n                                FROM v1.extensions_loadable_libraries ell\n                                WHERE ell.extension_version_id = ev.id\n                            ),\n                            'configurations', (\n                                SELECT json_agg(json_build_object(\n                                    'name', ec.configuration_name,\n                                    'is_required', ec.is_required,\n                                    'default', ec.recommended_default_value\n                                ))\n                                FROM v1.extension_configurations ec\n                                WHERE ec.extension_version_id = ev.id\n                            ),\n                            'control_file', (\n                                SELECT json_build_object(\n                                    'absent', cf.absent,\n                                    'content', cf.content\n                                )\n                                FROM v1.control_file cf\n                                WHERE cf.extension_version_id = ev.id\n                            )\n                        ))\n                        FROM v1.extension_versions ev\n                        WHERE ev.trunk_project_version_id = latest_tpvs.id\n                    )\n                ) AS result\n            FROM\n                v1.trunk_project tp\n            JOIN (\n                SELECT tpv.*\n                FROM v1.trunk_project_versions tpv\n                JOIN (\n                        SELECT trunk_project_name, MAX(string_to_array(version, '.')::int[]) as max_version\n                        FROM v1.trunk_project_versions\n                        GROUP BY trunk_project_name\n                    ) sub_tpv\n                ON tpv.trunk_project_name = sub_tpv.trunk_project_name\n                AND string_to_array(tpv.version, '.')::int[] = sub_tpv.max_version\n                ) latest_tpvs\n            ON tp.name = latest_tpvs.trunk_project_name\n            ORDER BY tp.name",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "result",
        "type_info": "Json"
      }
    ],
    "parameters": {
      "Left": []
    },
    "nullable": [
      null
    ]
  },
  "hash": "7c0f23131094cf9610841295fd1d44733450affe0f01d42e55204419cd376f7a"
}
